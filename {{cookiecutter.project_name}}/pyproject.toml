[tool.poetry]
name = "{{cookiecutter.project_module}}"
version = "0.1.0"
description = "{{cookiecutter.project_description}}"
authors = ["{{cookiecutter.project_author}} <{{cookiecutter.project_author_email}}>"]
packages = [
    { include = "{{cookiecutter.project_module}}" }
]

[tool.poetry.dependencies]
python = "^{python_version}"

[tool.poetry.dev-dependencies]
safety = { version = "*" }
black = { version = "*", allow-prereleases = true }
flake8 = { version = "*" }
isort = { version = "*" }
mypy = { version = "*" }
pytest-aio = { version = "*" }
pytest-assume = { version = "*" }
pytest-asyncio = { version = "*" }
pytest-black = { version = "*" }
pytest-colordots = { version = "*" }
pytest-cov = { version = "*" }
pytest-datadir = { version = "*" }
pytest-depends = { version = "*" }
pytest-flake8 = { version = "*" }
pytest-html = { version = "*" }
pytest-metadata = { version = "*" }
pytest-mock = { version = "*" }
pytest-pylint = { version = "*" }
pytest-sugar = { version = "*" }
pytest-isort = { version = "*" }
pytest-mypy = { version = "*" }
pytest = { version = "*" }
pytest-xdist = { version = "*" }

[tool.pytest.scripts]
test_mypy = "scripts.code_format:test_mypy"
test_isort = "scripts.code_format:test_isort"
test_isort_fix = "scripts.code_format:test_isort_fix"
test_black = "scripts.code_format:test_black"
test_black_fix = "scripts.code_format:test_black_fix"
test_pylint = "scripts.code_format:test_pylint"
test_flake8 = "scripts.code_format:test_flake8"
pytest_cov_term = "scripts.code_format:pytest_cov_term"
pytest_test_reports = "scripts.code_format:pytest_test_reports"
pytest_cov_reports = "scripts.code_format:pytest_cov_reports"

[tool.pytest.ini_options]
python_classes = "test_*"
python_functions = "test_*"
python_files = "test_*.py"
addopts = "-v"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s %(levelname)s %(filename)s %(funcName)s %(lineno)d %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
testpaths = [
    "{{cookiecutter.project_module}}",
    "tests",
]
markers = [
    "unit_tests: unit tests",
    "integration_tests: integration tests",
]
filterwarnings = [
    # pytest_sugar.py:169: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    "ignore:.*distutils Version classes are deprecated.*:DeprecationWarning",
    # pytest_asyncio\plugin.py:191: DeprecationWarning: The 'asyncio_mode' default value will change to 'strict' in future,
    # please explicitly use 'asyncio_mode=strict' or 'asyncio_mode=auto' in pytest configuration file.
    "ignore:.*asyncio_mode.*:DeprecationWarning",
    # pytest.PytestWarning: BlackItem is an Item subclass and should not be a collector, however its bases File are collectors.
    "ignore:.* is an Item subclass and should not be a collector.*:pytest.PytestWarning",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"

[tool.coverage.run]
source = ["{{cookiecutter.project_module}}"]
omit = [
    "{{cookiecutter.project_module}}/__main__.py",
    "tests/conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    'if self\.debug',
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    'if __name__ == .__main__.:',
]
